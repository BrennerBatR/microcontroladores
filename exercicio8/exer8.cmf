%CMF
# %PSECTS Section
# For each object file, details of its psects are enumerated here.
# The begining of the section is indicated by %PSECTS.  The first
# line indicates the name of the first object file, e.g.
#    $foo.obj
# Each line that follows describes a psect in that object file, until
# the next object file.  The lines that describe a psect have the
# format:
#    <psect name> <class name> <space> <link address> <load addresses> <length> <delta>
# All addresses and the length are given in unqualified hexadecimal
# in delta units.  Any other numeric values are decimal.
%PSECTS
$exer8.obj
cinit CODE 0 15 15 6 2
text1 CODE 0 83 83 17 2
text2 CODE 0 63 63 20 2
text3 CODE 0 42 42 21 2
maintext CODE 0 1B 1B 27 2
cstackCOMMON COMMON 1 70 70 A 1
cstackBANK0 BANK0 1 20 20 2 1
intentry CODE 0 4 4 E 2
bssCOMMON COMMON 1 7A 7A 2 1
$startup.obj
reset_vec CODE 0 0 0 3 2
end_init CODE 0 12 12 3 2
# %UNUSED Section
# This section enumerates the unused ranges of each CLASS. Each entry
# is described on a single line as follows:
#    <class name> <range> <delta>
# Addresses given in the range are in hexadecimal and units of delta.
%UNUSED
RAM 22-6F 1
RAM A0-EF 1
RAM 110-16F 1
RAM 190-1EF 1
BANK0 22-6F 1
BANK1 A0-EF 1
BANK2 110-16F 1
BANK3 190-1EF 1
CONST 3-3 2
CONST 9A-1FFF 2
ENTRY 3-3 2
ENTRY 9A-1FFF 2
IDLOC 2000-2003 2
STACK 110-16F 1
CODE 3-3 2
CODE 9A-1FFF 2
SFR0 0-1F 1
SFR1 80-9F 1
SFR2 100-10F 1
SFR3 180-18F 1
COMMON 7C-7D 1
CONFIG 2007-2008 2
EEDATA 2100-21FF 2
STRCODE 3-3 2
STRCODE 9A-1FFF 2
STRING 3-3 2
STRING 9A-1FFF 2
# %LINETAB Section
# This section enumerates the file/line to address mappings.
# The beginning of the section is indicated by %LINETAB.
# The first line indicates the name of the first object file, e.g.
#   $foo.obj
# Each line that follows describes a single mapping until the next
# object file.  Mappings have the following format:
#    <address> <psect name> <class name> ><line number>:<file name>
# The address is absolute and given given in unqualified hex 
# in delta units of the psect. All mappings within an object file
# are in ascending order of addresses.
# All other numeric values are in decimal.
%LINETAB
$exer8.obj
15 cinit CODE >215:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exer8.as
15 cinit CODE >218:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exer8.as
15 cinit CODE >229:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exer8.as
16 cinit CODE >230:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exer8.as
17 cinit CODE >236:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exer8.as
17 cinit CODE >238:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exer8.as
18 cinit CODE >239:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exer8.as
4 intentry CODE >23:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
42 text3 CODE >15:C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c
42 text3 CODE >43:C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c
44 text3 CODE >45:C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c
46 text3 CODE >46:C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c
4C text3 CODE >47:C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c
53 text3 CODE >48:C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c
5A text3 CODE >49:C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c
5E text3 CODE >52:C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c
63 text2 CODE >7:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
63 text2 CODE >10:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
66 text2 CODE >11:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
68 text2 CODE >13:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
6E text2 CODE >15:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
7F text2 CODE >18:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
82 text2 CODE >20:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
83 text1 CODE >23:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
83 text1 CODE >24:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
85 text1 CODE >25:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
87 text1 CODE >26:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
88 text1 CODE >27:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
8D text1 CODE >29:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
1B maintext CODE >31:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
1B maintext CODE >33:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
1F maintext CODE >34:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
23 maintext CODE >35:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
24 maintext CODE >36:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
25 maintext CODE >39:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
28 maintext CODE >40:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
2B maintext CODE >42:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
2E maintext CODE >43:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
32 maintext CODE >44:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
35 maintext CODE >45:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
36 maintext CODE >47:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
41 maintext CODE >48:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\exe8.c
$startup.obj
12 end_init CODE >76:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\startup.as
12 init CODE >73:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\startup.as
0 functab ENTRY >39:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\startup.as
0 functab ENTRY >40:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\startup.as
0 functab ENTRY >41:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\startup.as
0 functab ENTRY >42:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\startup.as
0 functab ENTRY >43:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\startup.as
0 functab ENTRY >44:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\startup.as
0 reset_vec CODE >63:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\startup.as
0 reset_vec CODE >68:C:\Users\Brenn\OneDrive\햞ea de Trabalho\provaMicro\Code\Micro\microcontroladores\exercicio8\startup.as
# %SYMTAB Section
# An enumeration of all symbols in the program.
# The beginning of the section is indicated by %SYMTAB.
# Each line describes a single symbol as follows:
#    <label> <value> [-]<load-adj> <class> <space> <psect> <file-name>
# The value and load-adj are both in unqualified hexadecimal.
# All other numeric values are in decimal.  The load-adj is the
# quantity one needs to add to the symbol value in order to obtain the load
# address of the symbol.  This value may be signed. If the symbol
# was defined in a psect then <psect> will be "-". File-name
# is the name of the object file in which the symbol was defined.
%SYMTAB
___latbits 2 0 ABS 0 - exer8.obj
__Hspace_0 9A 0 ABS 0 - -
__Hspace_1 7C 0 ABS 0 - -
__Hspace_2 0 0 ABS 0 - -
__Hspace_3 0 0 ABS 0 - -
__Heeprom_data 0 0 EEDATA 3 eeprom_data -
__Hstrings 0 0 ABS 0 strings -
_T0IE 5D 0 ABS 0 - exer8.obj
_T0IF 5A 0 ABS 0 - exer8.obj
_TMR0 1 0 ABS 0 - exer8.obj
___sp 0 0 STACK 2 stack startup.obj
_main 36 0 CODE 0 maintext exer8.obj
btemp 7E 0 ABS 0 - exer8.obj
__size_of_interrompe 0 0 ABS 0 - exer8.obj
start 24 0 CODE 0 init startup.obj
__size_of_main 0 0 ABS 0 - exer8.obj
__HbssCOMMON 0 0 ABS 0 bssCOMMON -
?___wmul 70 0 COMMON 1 cstackCOMMON exer8.obj
__size_of_amostrador 0 0 ABS 0 - exer8.obj
__Hpowerup 0 0 CODE 0 powerup -
intlevel0 0 0 ENTRY 0 functab startup.obj
intlevel1 0 0 ENTRY 0 functab startup.obj
intlevel2 0 0 ENTRY 0 functab startup.obj
intlevel3 0 0 ENTRY 0 functab startup.obj
intlevel4 0 0 ENTRY 0 functab startup.obj
intlevel5 0 0 ENTRY 0 functab startup.obj
__LbssCOMMON 0 0 ABS 0 bssCOMMON -
wtemp0 7E 0 ABS 0 - exer8.obj
__Hfunctab 0 0 ENTRY 0 functab -
__Hclrtext 0 0 ABS 0 clrtext -
___wmul@multiplicand 72 0 COMMON 1 cstackCOMMON exer8.obj
_ADCON0 1F 0 ABS 0 - exer8.obj
_ADCON1 9F 0 ABS 0 - exer8.obj
_ADRESH 1E 0 ABS 0 - exer8.obj
_ADRESL 9E 0 ABS 0 - exer8.obj
__end_of___wmul C6 0 CODE 0 text3 exer8.obj
__Lmaintext 0 0 ABS 0 maintext -
_OPTION_REG 81 0 ABS 0 - exer8.obj
start_initialization 2A 0 CODE 0 cinit exer8.obj
__pcstackBANK0 20 0 BANK0 1 cstackBANK0 exer8.obj
___int_sp 0 0 STACK 2 stack startup.obj
__Hbank0 0 0 ABS 0 bank0 -
__Hbank1 0 0 ABS 0 bank1 -
__Hbank2 0 0 ABS 0 bank2 -
__Hbank3 0 0 ABS 0 bank3 -
__Hcinit 36 0 CODE 0 cinit -
__Hidloc 0 0 IDLOC 0 idloc -
__Hstack 0 0 STACK 2 stack -
__Hmaintext 0 0 ABS 0 maintext -
__Hcommon 0 0 ABS 0 common -
__Hconfig 0 0 CONFIG 0 config -
__Lbank0 0 0 ABS 0 bank0 -
__Lbank1 0 0 ABS 0 bank1 -
__Lbank2 0 0 ABS 0 bank2 -
__Lbank3 0 0 ABS 0 bank3 -
__Lcinit 2A 0 CODE 0 cinit -
__Lidloc 0 0 IDLOC 0 idloc -
__Lstack 0 0 STACK 2 stack -
__Habs1 0 0 ABS 0 abs1 -
__Hcode 0 0 ABS 0 code -
__Hinit 24 0 CODE 0 init -
__Hsfr0 0 0 ABS 0 sfr0 -
__Hsfr1 0 0 ABS 0 sfr1 -
__Hsfr2 0 0 ABS 0 sfr2 -
__Hsfr3 0 0 ABS 0 sfr3 -
__Htext 0 0 ABS 0 text -
__Labs1 0 0 ABS 0 abs1 -
__Lcode 0 0 ABS 0 code -
__Linit 24 0 CODE 0 init -
__Lsfr0 0 0 ABS 0 sfr0 -
__Lsfr1 0 0 ABS 0 sfr1 -
__Lsfr2 0 0 ABS 0 sfr2 -
__Lsfr3 0 0 ABS 0 sfr3 -
__Ltext 0 0 ABS 0 text -
___wmul 84 0 CODE 0 text3 exer8.obj
__LcstackBANK0 0 0 ABS 0 cstackBANK0 -
__HcstackCOMMON 0 0 ABS 0 cstackCOMMON -
_GIE 5F 0 ABS 0 - exer8.obj
__S0 9A 0 ABS 0 - -
__S1 7C 0 ABS 0 - -
__S2 0 0 ABS 0 - -
__S3 0 0 ABS 0 - -
saved_w 7E 0 ABS 0 - exer8.obj
__Lintentry 8 0 CODE 0 intentry -
reset_vec 0 0 CODE 0 reset_vec startup.obj
__size_of___wmul 0 0 ABS 0 - exer8.obj
_interrompe 106 0 CODE 0 text1 exer8.obj
__pmaintext 36 0 CODE 0 maintext exer8.obj
__Lcommon 0 0 ABS 0 common -
__Lconfig 0 0 CONFIG 0 config -
___wmul@multiplier 70 0 COMMON 1 cstackCOMMON exer8.obj
_amostrador C6 0 CODE 0 text2 exer8.obj
stackhi 0 0 ABS 0 - startup.obj
stacklo 0 0 ABS 0 - startup.obj
__Lspace_0 0 0 ABS 0 - -
__Lspace_1 0 0 ABS 0 - -
__Lspace_2 0 0 ABS 0 - -
__Lspace_3 0 0 ABS 0 - -
__pbssCOMMON 7A 0 COMMON 1 bssCOMMON exer8.obj
__HcstackBANK0 0 0 ABS 0 cstackBANK0 -
__Lend_init 24 0 CODE 0 end_init -
__LcstackCOMMON 0 0 ABS 0 cstackCOMMON -
end_of_initialization 2E 0 CODE 0 cinit exer8.obj
__Hintentry 24 0 CODE 0 intentry -
__Lstrings 0 0 ABS 0 strings -
__end_of_interrompe 134 0 CODE 0 text1 exer8.obj
__Hreset_vec 6 0 CODE 0 reset_vec -
__ptext1 106 0 CODE 0 text1 exer8.obj
__ptext2 C6 0 CODE 0 text2 exer8.obj
__ptext3 84 0 CODE 0 text3 exer8.obj
__end_of_amostrador 106 0 CODE 0 text2 exer8.obj
__Lpowerup 0 0 CODE 0 powerup -
__Leeprom_data 0 0 EEDATA 3 eeprom_data -
__Lreset_vec 0 0 CODE 0 reset_vec -
__end_of__initialization 2E 0 CODE 0 cinit exer8.obj
__Lfunctab 0 0 ENTRY 0 functab -
__Lclrtext 0 0 ABS 0 clrtext -
__pcstackCOMMON 70 0 COMMON 1 cstackCOMMON exer8.obj
__Hend_init 2A 0 CODE 0 end_init -
__end_of_main 84 0 CODE 0 maintext exer8.obj
_ANSEL 188 0 ABS 0 - exer8.obj
_TRISA 85 0 ABS 0 - exer8.obj
__Hram 0 0 ABS 0 ram -
__Lram 0 0 ABS 0 ram -
interrupt_function 8 0 CODE 0 intentry exer8.obj
_valor 7A 0 COMMON 1 bssCOMMON exer8.obj
__pintentry 8 0 CODE 0 intentry exer8.obj
__initialization 2A 0 CODE 0 cinit exer8.obj
___wmul@product 74 0 COMMON 1 cstackCOMMON exer8.obj
# %SPLITSTAB Section
# This section enumerates all the psect splits performed by the assembler.
# The beginning of the section is indicated by %SPLITSTAB.
# Each line is a record a particular split, where the parent psect is on
# the left and the child on the right.  Note that a child psect is always
# split form the top of the parent psect. All splits from a given parent
# are listed in the order in which they occurred.
%SPLITSTAB
# %DABS Section
# This section contains a table of all usuage of the assember
# directive DABS in the program. Each line has the following format:
#   <name> <space> <address> <size>
# If the DABS was originally labelled then that shall be <name>,
# otherwise name will be "-".  The <space> number is in decimal.
# <address> and <size> are in byte units as unqaulified hexadecimal
%DABS
- 1 7E 2
# %SEGMENTS Section
# This sections enumerates the segments of the program.  Each segment
# is described on a single line as follows:
#    <name> <space> <link address> <file address> <size> <delta>
# Addresses and size are in unqualified hexadecimal.  The link address
# and size are in units of delta. The file address is in units of bytes.
# All other numeric quantities are in decimal.
%SEGMENTS
cstackCOMMON 1 70 70 C 1
cstackBANK0 1 20 20 2 1
intentry 0 4 8 96 2
reset_vec 0 0 0 3 2
